
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 21 10:01:07 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 21 10:01:07 IST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\015\003\000\002\002\004\000\002\015" +
    "\003\000\002\020\010\000\002\021\010\000\002\021\006" +
    "\000\002\016\003\000\002\016\002\000\002\017\005\000" +
    "\002\017\003\000\002\022\003\000\002\022\005\000\002" +
    "\022\006\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\060\004\061\007\001\002\000\004\011" +
    "\031\001\002\000\004\002\001\001\002\000\004\002\uffff" +
    "\001\002\000\004\021\024\001\002\000\004\021\013\001" +
    "\002\000\004\002\012\001\002\000\004\002\000\001\002" +
    "\000\004\060\014\001\002\000\004\011\015\001\002\000" +
    "\004\012\ufffa\001\002\000\004\012\ufffb\001\002\000\004" +
    "\012\023\001\002\000\006\012\ufff8\020\021\001\002\000" +
    "\004\012\ufffa\001\002\000\004\012\ufff9\001\002\000\004" +
    "\002\ufffd\001\002\000\004\060\025\001\002\000\004\011" +
    "\026\001\002\000\004\012\ufffa\001\002\000\004\012\030" +
    "\001\002\000\004\002\ufffe\001\002\000\004\012\ufffa\001" +
    "\002\000\004\012\033\001\002\000\004\002\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\012\012\007\015\010\020\004\021\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\017\016\016\017\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\017\016\021" +
    "\017\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\017\016\026" +
    "\017\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\017\016\031\017\015\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol t = lexer.next_token();
	if (printTokens)
		System.out.println(getLine() + ":" + getText());
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public String getText() {
		return lexer.getText();
	}
	
	public void syntax_error(Symbol s) {
		System.out.println("Line " + getLine()+": Syntax error; unexpected " + getText());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Literal ::= NULL 
            {
              Object RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Literal ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Literal ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Literal ::= INTEGER 
            {
              Object RESULT =null;
		int iLiteralleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iLiteralright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer iLiteral = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntLiteral(iLiteral); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Literal ::= QUOTE 
            {
              Object RESULT =null;
		int sLiteralleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sLiteralright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sLiteral = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(sLiteral); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Location ::= expr LB expr RB 
            {
              Object RESULT =null;
		int eIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr eId = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eIndexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eIndexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr eIndex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayValueLocation(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Location ::= expr DOT ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueLocation(e1, varID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Location ::= ID 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueLocation(varID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NonEmptyArgumentList ::= expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentListNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyArgumentList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NonEmptyArgumentList ::= expr COMMA ArgumentList 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentListNode(e1, l1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyArgumentList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ArgumentList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArgumentList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ArgumentList ::= NonEmptyArgumentList 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(l1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VirtualCall ::= ID LP ArgumentList RP 
            {
              Object RESULT =null;
		int funcidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funcid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argslistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argslistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argslist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualFunctionCall(funcid, argslist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VirtualCall ::= expr DOT ID LP ArgumentList RP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funcid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argslistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argslistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argslist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualFunctionCall(funcid, argslist, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StaticCall ::= CLASS_ID DOT ID LP ArgumentList RP 
            {
              Object RESULT =null;
		int classidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int classidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String classid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funcid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argslistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argslistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argslist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticFunctionCall(classid, functionid, argslist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticCall",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FunctionCall ::= VirtualCall 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 return c1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= FunctionCall EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // FunctionCall ::= StaticCall 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 return c1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

