
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 21 10:27:55 IST 2015
//----------------------------------------------------

package slp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 21 10:27:55 IST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\007" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\012\005\000\002\013\005\000\002\013\003\000\002" +
    "\006\013\000\002\006\013\000\002\006\012\000\002\006" +
    "\012\000\002\014\004\000\002\014\002\000\002\015\005" +
    "\000\002\015\002\000\002\007\004\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\021\003\000\002\021\003\000\002\024" +
    "\010\000\002\025\010\000\002\025\006\000\002\022\003" +
    "\000\002\022\002\000\002\023\005\000\002\023\003\000" +
    "\002\026\003\000\002\026\005\000\002\026\006\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\004\016\007\001\002\000\006\002\ufffe\016" +
    "\ufffe\001\002\000\006\002\001\016\007\001\002\000\004" +
    "\002\110\001\002\000\004\061\010\001\002\000\006\023" +
    "\011\050\012\001\002\000\004\061\104\001\002\000\020" +
    "\014\ufff9\032\ufff9\035\ufff9\052\ufff9\055\ufff9\061\ufff9\062" +
    "\ufff9\001\002\000\020\014\017\032\015\035\023\052\016" +
    "\055\020\061\021\062\025\001\002\000\020\014\ufffb\032" +
    "\ufffb\035\ufffb\052\ufffb\055\ufffb\061\ufffb\062\ufffb\001\002" +
    "\000\006\034\uffeb\060\uffeb\001\002\000\004\055\065\001" +
    "\002\000\006\034\uffea\060\uffea\001\002\000\004\060\055" +
    "\001\002\000\006\034\uffe8\060\uffe8\001\002\000\020\014" +
    "\ufffa\032\ufffa\035\ufffa\052\ufffa\055\ufffa\061\ufffa\062\ufffa" +
    "\001\002\000\006\002\ufffc\016\ufffc\001\002\000\006\034" +
    "\035\060\047\001\002\000\006\034\uffe9\060\uffe9\001\002" +
    "\000\004\060\027\001\002\000\004\011\030\001\002\000" +
    "\014\012\ufff0\014\017\032\015\061\021\062\025\001\002" +
    "\000\004\012\043\001\002\000\006\012\uffee\020\037\001" +
    "\002\000\006\034\035\060\034\001\002\000\006\012\uffed" +
    "\020\uffed\001\002\000\004\047\036\001\002\000\006\034" +
    "\uffec\060\uffec\001\002\000\012\014\017\032\015\061\021" +
    "\062\025\001\002\000\004\012\ufff1\001\002\000\006\012" +
    "\uffee\020\037\001\002\000\004\012\uffef\001\002\000\004" +
    "\034\044\001\002\000\002\001\002\000\004\047\046\001" +
    "\002\000\020\014\ufff3\032\ufff3\035\ufff3\052\ufff3\055\ufff3" +
    "\061\ufff3\062\ufff3\001\002\000\006\004\052\020\050\001" +
    "\002\000\004\060\053\001\002\000\020\014\ufff8\032\ufff8" +
    "\035\ufff8\052\ufff8\055\ufff8\061\ufff8\062\ufff8\001\002\000" +
    "\020\014\ufff6\032\ufff6\035\ufff6\052\ufff6\055\ufff6\061\ufff6" +
    "\062\ufff6\001\002\000\006\004\052\020\050\001\002\000" +
    "\020\014\ufff7\032\ufff7\035\ufff7\052\ufff7\055\ufff7\061\ufff7" +
    "\062\ufff7\001\002\000\004\011\056\001\002\000\014\012" +
    "\ufff0\014\017\032\015\061\021\062\025\001\002\000\004" +
    "\012\060\001\002\000\004\034\061\001\002\000\002\001" +
    "\002\000\004\047\063\001\002\000\020\014\ufff2\032\ufff2" +
    "\035\ufff2\052\ufff2\055\ufff2\061\ufff2\062\ufff2\001\002\000" +
    "\004\060\075\001\002\000\004\060\066\001\002\000\004" +
    "\011\067\001\002\000\014\012\ufff0\014\017\032\015\061" +
    "\021\062\025\001\002\000\004\012\071\001\002\000\004" +
    "\034\072\001\002\000\002\001\002\000\004\047\074\001" +
    "\002\000\020\014\ufff4\032\ufff4\035\ufff4\052\ufff4\055\ufff4" +
    "\061\ufff4\062\ufff4\001\002\000\004\011\076\001\002\000" +
    "\014\012\ufff0\014\017\032\015\061\021\062\025\001\002" +
    "\000\004\012\100\001\002\000\004\034\101\001\002\000" +
    "\002\001\002\000\004\047\103\001\002\000\020\014\ufff5" +
    "\032\ufff5\035\ufff5\052\ufff5\055\ufff5\061\ufff5\062\ufff5\001" +
    "\002\000\004\050\105\001\002\000\020\014\ufff9\032\ufff9" +
    "\035\ufff9\052\ufff9\055\ufff9\061\ufff9\062\ufff9\001\002\000" +
    "\020\014\017\032\015\035\107\052\016\055\020\061\021" +
    "\062\025\001\002\000\006\002\ufffd\016\ufffd\001\002\000" +
    "\004\002\000\001\002\000\006\002\uffff\016\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\004\004\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\012\001\001\000\012\006\013\010\023\011\025" +
    "\012\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\031\010\032\014\030\001\001\000" +
    "\002\001\001\000\004\015\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\040\010\032\001\001\000\002\001\001\000\004" +
    "\015\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\031\010\032\014" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\031\010\032\014\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\031\010" +
    "\032\014\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\105\001\001\000\012" +
    "\006\013\010\023\011\025\012\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol t = lexer.next_token();
	if (printTokens)
		System.out.println(getLine() + ":" + getText());
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public String getText() {
		return lexer.getText();
	}
	
	public void syntax_error(Symbol s) {
		System.out.println("Line " + getLine()+": Syntax error; unexpected " + getText());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Literal ::= NULL 
            {
              Object RESULT =null;
		 RESULT = new NullLiteral(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Literal ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new BoolLiteral(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Literal ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new BoolLiteral(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Literal ::= INTEGER 
            {
              Object RESULT =null;
		int iLiteralleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iLiteralright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer iLiteral = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntLiteral(iLiteral); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Literal ::= QUOTE 
            {
              Object RESULT =null;
		int sLiteralleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sLiteralright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sLiteral = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteral(sLiteral); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Location ::= expr LB expr RB 
            {
              Object RESULT =null;
		int eIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr eId = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eIndexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eIndexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr eIndex = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayValueLocation(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Location ::= expr DOT ID 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueLocation(e1, varID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Location ::= ID 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValueLocation(varID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Location",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NonEmptyArgumentList ::= expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentListNode(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyArgumentList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NonEmptyArgumentList ::= expr COMMA ArgumentList 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentListNode(e1, l1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyArgumentList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArgumentList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArgumentList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ArgumentList ::= NonEmptyArgumentList 
            {
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgumentList(l1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VirtualCall ::= ID LP ArgumentList RP 
            {
              Object RESULT =null;
		int funcidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funcid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argslistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argslistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argslist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualFunctionCall(funcid, argslist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VirtualCall ::= expr DOT ID LP ArgumentList RP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funcid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argslistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argslistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argslist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VirtualFunctionCall(funcid, argslist, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VirtualCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StaticCall ::= CLASS_ID DOT ID LP ArgumentList RP 
            {
              Object RESULT =null;
		int classidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int classidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String classid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String funcid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argslistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argslistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object argslist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StaticFunctionCall(classid, functionid, argslist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StaticCall",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionCall ::= VirtualCall 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 return c1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunctionCall ::= StaticCall 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 return c1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new objectClassType(c.toString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= QUOTE 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new PrimitiveType(DataTypes.STRING);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new PrimitiveType(DataTypes.BOOLEAN);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new PrimitiveType(DataTypes.INT);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
			t.incrementDimension();
			RESULT = t;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal ::= type ID 
            {
              MethodFormal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new MethodFormal(t, f_name.toString());
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // more_formals ::= 
            {
              List<Formal> RESULT =null;
		
				RESULT = new ArrayList<Formal>();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_formals",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // more_formals ::= COMMA formal more_formals 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodFormal f = (MethodFormal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m_formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m_formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Formal> m_formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				m_formals.add(0, f);
				RESULT = m_formals;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_formals",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_lst ::= 
            {
              List<Formal> RESULT =null;
		
				RESULT = new ArrayList<Formal>();
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_lst",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal_lst ::= formal more_formals 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodFormal f = (MethodFormal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int m_formalsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int m_formalsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Formal> m_formals = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				m_formals.add(0, f);
				RESULT = m_formals;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_lst",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= VOID ID LP formal_lst RP LB stmt_list RB 
            {
              ClassMethod RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int method_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int method_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String method_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int f_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int f_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> f_lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s_lst = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				RESULT = new VirtualMethod(new PrimitiveType(DataTypes.VOID), method_name.toString(), f_lst, s_lst);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= method_type ID LP formal_lst RP LB stmt_list RB 
            {
              ClassMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int method_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int method_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String method_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int f_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int f_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> f_lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s_lst = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				RESULT = new VirtualMethod(t, method_name.toString(), f_lst, s_lst);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method ::= STATIC VOID ID LP formal_lst RP LB stmt_list RB 
            {
              ClassMethod RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int method_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int method_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String method_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int f_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int f_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> f_lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s_lst = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new StaticMethod(new PrimitiveType(DataTypes.VOID), method_name.toString(), f_lst, s_lst);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method ::= STATIC method_type ID LP formal_lst RP LB stmt_list RB 
            {
              ClassMethod RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int method_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int method_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String method_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int f_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int f_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Formal> f_lst = (List<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmtList s_lst = (StmtList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
				RESULT = new StaticMethod(t, method_name.toString(), f_lst, s_lst);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // more_fields ::= SEMI 
            {
              List<String> RESULT =null;
		
 				RESULT = new ArrayList<String>();
 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_fields",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // more_fields ::= COMMA ID more_fields 
            {
              List<String> RESULT =null;
		int field_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int field_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String field_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int field_names_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int field_names_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> field_names_lst = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
			 	field_names_lst.add(0, field_name.toString());
			 	RESULT = field_names_lst;
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("more_fields",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields ::= type ID more_fields 
            {
              List<ClassField> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int field_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int field_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String field_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int field_names_lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int field_names_lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> field_names_lst = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		field_names_lst.add(0, field_name.toString());
		List<Field> fields_list = new ArrayList<Field>();
		for (int i = 0; i < field_names_lst.size(); i++)
			fields_list.add(new ClassField(0,field_names_lst.get(i))); 
		RESULT = fields_list; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // class_param_lst ::= 
            {
              ClassParams RESULT =null;
		 
		RESULT = new ClassParams();
	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_param_lst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_param_lst ::= class_param_lst fields 
            {
              ClassParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassParams params = (ClassParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ClassField> f = (List<ClassField>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		params.fields.addAll(f);
		RESULT = params; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_param_lst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_param_lst ::= class_param_lst method 
            {
              ClassParams RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassParams params = (ClassParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassMethod m = (ClassMethod)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		params.methods.add(m);
		RESULT = params; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_param_lst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ic_class ::= CLASS CLASS_ID LCBR class_param_lst RCBR 
            {
              ICClass RESULT =null;
		int class_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int class_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object class_key = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassParams params = (ClassParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		RESULT = new ICClass(name.toString(), null, params.fields, params.methods);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ic_class",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ic_class ::= CLASS CLASS_ID EXTENDS CLASS_ID LCBR class_param_lst RCBR 
            {
              ICClass RESULT =null;
		int class_keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int class_keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object class_key = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int extended_class_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int extended_class_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String extended_class_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassParams params = (ClassParams)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new ICClass(name.toString(), extended_class_name.toString(), params.fields, params.methods);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ic_class",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= ic_class 
            {
              List<ICClass> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
  		RESULT = new ArrayList<ICClass>();
  		RESULT.add(c)
  	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class_list ic_class 
            {
              List<ICClass> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ICClass> lst = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		lst.add(c); 
		RESULT = lst; 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              Program RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ICClass> lst = (List<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		RESULT = new Program(lst);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

