package slp;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public String getText() {
		return lexer.getText();
	}
	
	public void syntax_error(Symbol s) {
		System.out.println("Line " + getLine()+": Syntax error; unexpected " + getText());
	}
:}

// This is just for debugging
scan with {:
	Symbol t = lexer.next_token();
	if (printTokens)
		System.out.println(getLine() + ":" + getText());
	return t; 
:};

/**********************/
/* TERMINALS (TOKENS) */
/**********************/
terminal SEMI;
terminal PLUS;
terminal MULTIPLY;
terminal DIVIDE;
terminal MINUS;
terminal LP;
terminal RP;
terminal ASSIGN;
terminal BOOLEAN;
terminal BREAK;
terminal CLASS;
terminal CONTINUE;
terminal COMMA;
terminal DOT;
terminal EQUAL;
terminal EXTENDS;
terminal ELSE;
terminal FALSE;
terminal TRUE;
terminal GT;
terminal GTE;
terminal IF;
terminal INT;
terminal LAND;
terminal LB;
terminal RCBR;
terminal LENGTH;
terminal NEW;
terminal LNEG;
terminal LOR;
terminal LT;
terminal LTE;
terminal MOD;
terminal NEQUAL;
terminal NULL;
terminal RB;
terminal LCBR;
terminal RETURN;
terminal STATIC;
terminal STRING;
terminal THIS;
terminal VOID;
terminal WHILE;
terminal UMINUS;

terminal Integer	INTEGER;
terminal String		ID;
terminal String		CLASS_ID;
terminal String		QUOTE;

/**********************/
/*    NONTERMINALS    */
/**********************/

non terminal Program program;
non terminal List<ICClass> class_list;
non terminal ICClass ic_class;
non terminal ClassParams class_param_lst;
non terminal ClassMethod method;
non terminal MethodFormal formal;
non terminal Type type;

non terminal List<ClassField> fields;
non terminal List<String> more_fields;
non terminal List<MethodFormal> formal_lst, more_formals;


non terminal Expr expr;
non terminal Stmt stmt;
non terminal Stmt else_stmt;
non terminal StmtList stmt_list;

non terminal FunctionCall FunctionCall;
non terminal ArgumentList ArgumentList;
non terminal ArgumentList NonEmptyArgumentList;
non terminal StaticFunctionCall StaticCall;
non terminal VirtualFunctionCall VirtualCall;
non terminal ValueLocation Location;
non terminal Literal Literal;

precedence left LOR;
precedence left LAND;
precedence left PLUS, MINUS;
precedence left DIVIDE, MULTIPLY;
precedence left UMINUS;
precedence left GT, LT, GTE, LTE;

/**********************/
/*   THE IC GRAMMER   */
/**********************/

program ::= class_list:lst
	{:
		RESULT = new Program(lst, getLine());
	:}
;

class_list ::= class_list:lst ic_class:c
	{: 
		lst.add(c); 
		RESULT = lst; 
	:}
  	| ic_class:c
  	{: 
  		RESULT = new ArrayList<ICClass>();
  		RESULT.add(c);
  	 :}
 ;

ic_class ::= CLASS:class_key CLASS_ID:name EXTENDS CLASS_ID:extended_class_name LCBR class_param_lst:params RCBR
	{:
		RESULT = new ICClass(name.toString(), extended_class_name.toString(), params.members, getLine());
	:} 
	| CLASS:class_key CLASS_ID:name LCBR class_param_lst:params RCBR
	{: 
		RESULT = new ICClass(name.toString(), null, params.members, getLine());
	:}
;

class_param_lst ::= class_param_lst:params method:m
	{: 
		params.members.add(m);
		RESULT = params; 
	:}
	| class_param_lst:params fields:f
	{: 
		params.members.addAll(f);
		RESULT = params; 
	:}
	| /* no fiels, no methods */
	{: 
		RESULT = new ClassParams();
	 :}
;

fields ::=  type:t ID:field_name more_fields:field_names_lst
	{: 
		field_names_lst.add(0, field_name.toString());
		List<ClassField> fields_list = new ArrayList<ClassField>();
		for (int i = 0; i < field_names_lst.size(); i++)
			fields_list.add(new ClassField(t,field_names_lst.get(i), getLine())); 
		RESULT = fields_list; 
	:}
;

more_fields ::= COMMA ID:field_name more_fields:field_names_lst
			{: 
			 	field_names_lst.add(0, field_name.toString());
			 	RESULT = field_names_lst;
			 :}
			| SEMI
 			{:
 				RESULT = new ArrayList<String>();
 			:}
 ;
 
 method ::= STATIC type:t ID:method_name LP formal_lst:f_lst RP LCBR stmt_list:s_lst RCBR
			{: 
				RESULT = new StaticMethod(t, method_name.toString(), f_lst, s_lst, getLine());
			:}
			| STATIC VOID:v ID:method_name LP formal_lst:f_lst RP LCBR stmt_list:s_lst RCBR 
			{:
				RESULT = new StaticMethod(new PrimitiveType(getLine(), DataTypes.VOID), method_name.toString(), f_lst, s_lst, getLine());
			:}
			| type:t ID:method_name LP formal_lst:f_lst RP LCBR stmt_list:s_lst RCBR
			{: 
				RESULT = new VirtualMethod(t, method_name.toString(), f_lst, s_lst, getLine());
			:}
			| VOID:v ID:method_name LP formal_lst:f_lst RP LCBR stmt_list:s_lst RCBR
			{: 
				RESULT = new VirtualMethod(new PrimitiveType(getLine(), DataTypes.VOID), method_name.toString(), f_lst, s_lst, getLine());
			:}
; 

formal_lst ::= formal:f more_formals:m_formals 
			{:
				m_formals.add(0, f);
				RESULT = m_formals;
			:} 
			| 
			{:
				RESULT = new ArrayList<MethodFormal>();
			:}
;

more_formals ::= COMMA formal:f more_formals:m_formals
			{:
				m_formals.add(0, f);
				RESULT = m_formals;
			:} 
			| 
			{:
				RESULT = new ArrayList<MethodFormal>();
			:}
;

formal ::= type:t ID:f_name
		{:
			RESULT = new MethodFormal(t, f_name.toString(), getLine());
		:}
;

type ::= type:t LB RB
		{: 
			t.incrementDimension();
			RESULT = t;
		:}
		| INT:i
		{:
			RESULT = new PrimitiveType(getLine(), DataTypes.INT);
		:}
		| BOOLEAN:b
		{:
			RESULT = new PrimitiveType(getLine(), DataTypes.BOOLEAN);
		:}
		| STRING:s
		{:
			RESULT = new PrimitiveType(getLine(), DataTypes.STRING);
		:}
		| CLASS_ID:c
		{:
			RESULT = new ObjectClassType(getLine(), c.toString());
		:}
;


stmt_list ::= stmt:s
	{: RESULT = new StmtList(s, getLine()); :}
	| stmt_list:sl stmt:s
	{: sl.addStmt(s); RESULT = sl; :}
;

stmt ::= Location:l ASSIGN expr:e SEMI
	{: RESULT = new AssignStmt(l,e, getLine()); :} |
	FunctionCall:c SEMI
	{: RESULT = new CallStmt(c, getLine()); :}|
	RETURN expr:e SEMI
	{: RESULT = new Return(e, getLine()); :}|
	RETURN SEMI
	{: RESULT = new Return(null, getLine()); :}|
	IF LP expr:e RP stmt:doStmt else_stmt:eStmt
	{: RESULT = new If(e,doStmt,eStmt, getLine()); :}|
	WHILE LP expr:e RP stmt:doStmt
	{: RESULT = new While(e,doStmt, getLine()); :}| 
	BREAK SEMI
	{: RESULT = new Break(getLine()); :}|
	CONTINUE SEMI
	{: RESULT = new Continue(getLine()); :}|
	LCBR stmt_list:sl RCBR
	{: RESULT = new BlockStmt(sl, getLine()); :}|
	type:t ID:vName ASSIGN expr:e SEMI
	{: RESULT = new LocalVar(t,vName.toString(),e, getLine()); :}|
	type:t ID:vName SEMI 
	{: RESULT = new LocalVar(t,vName.toString(), getLine()); :}
;

else_stmt ::= ELSE stmt:s
			{: RESULT = s ; :}
			|
			{: RESULT = null; :}
;
expr ::= expr:e1 PLUS:p expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.PLUS, getLine());
		 :}
		| expr:e1 MINUS expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MINUS, getLine());
		 :}
		| expr:e1 MULTIPLY expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MULT, getLine());
		 :}
		| expr:e1 DIVIDE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.DIV, getLine());
		 :}
		| expr:e1 MOD expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MOD, getLine());
		   :} 
		| expr:e1 LAND expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LAND, getLine());
		 :}
		| expr:e1 LOR expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LOR, getLine());
		 :}
		| expr:e1 LT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LT, getLine());
		 :}
		| expr:e1 GT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GT, getLine());
		 :}
		| expr:e1 LTE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LE, getLine());
		 :}
		| expr:e1 GTE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GE, getLine());
		 :}
		| expr:e1 EQUAL expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.EQUAL, getLine());
		   :}
		| expr:e1 NEQUAL expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.NEQUAL, getLine());
		   :}
		| MINUS expr:e1
		{: RESULT = new UnaryOpExpr(e1, Operator.UMINUS, getLine()); :} %prec UMINUS
		| LNEG expr:e1
		{: RESULT = new UnaryOpExpr(e1, Operator.LNEG, getLine()); :}
		| LP expr:e RP
		{: RESULT = e; :}
		| THIS
		{: RESULT =  new This(getLine()); :}
		| NEW CLASS_ID:c1 LP RP
		{: RESULT = new newClass(c1.toString(), getLine()); :}
		| NEW type:t1 LB expr:e1 RB
		{: RESULT = new newArray(t1,e1, getLine()); :}
		| expr:e1 DOT LENGTH
		{: RESULT = new ExprLength(e1, getLine()); :}
		| Literal:l1
		{: RESULT = l1; :}
		| FunctionCall:c1
		{: RESULT = c1; :}
		| Location:l1
		{: RESULT = l1; :}
		
;

FunctionCall ::= 	StaticCall:c1
					{: RESULT = c1; :}
					| VirtualCall:c1
					{: RESULT = c1; :}
;

StaticCall ::= 	CLASS_ID:classid DOT ID:funcid LP ArgumentList:argslist RP
			 	{: RESULT = new StaticFunctionCall(classid.toString(), funcid.toString(), argslist, getLine()); :}
;

VirtualCall ::= expr:e1 DOT ID:funcid LP ArgumentList:argslist RP
				{: RESULT = new VirtualFunctionCall(funcid, argslist, e1, getLine()); :}
				| ID:funcid LP ArgumentList:argslist RP
				{: RESULT = new VirtualFunctionCall(funcid, argslist, getLine()); :}
;

ArgumentList ::= 	NonEmptyArgumentList:l1
					{: RESULT = l1; :}
					| 
					{: RESULT = null; :}
;

NonEmptyArgumentList ::= expr:e1 COMMA ArgumentList:l1
				{: RESULT = new ArgumentList(e1, l1, getLine()); :}
				| expr:e1
				{: RESULT = new ArgumentList(e1, null, getLine()); :}
;

Location ::= 	ID:varID
				{: RESULT = new VarValueLocation(varID.toString(), getLine()); :}
				| expr:e1 DOT ID:varID
				{: RESULT = new VarValueLocation(e1, varID.toString(), getLine()); :}
				| expr:eId LB expr:eIndex RB
				{: RESULT = new ArrValueLocation(eId, eIndex, getLine()); :}
;

Literal ::=		QUOTE:sLiteral
				{: RESULT = new StringLiteral(sLiteral, getLine()); :}
				| INTEGER:iLiteral
				{: RESULT = new IntLiteral(iLiteral, getLine()); :}
				| TRUE
				{: RESULT = new BoolLiteral(true, getLine()); :}
				| FALSE
				{: RESULT = new BoolLiteral(false, getLine()); :}
				| NULL
				{: RESULT = new NullLiteral(getLine()); :}
; 